#!/usr/bin/env bash
#
# Generate a CSV file from Excel file (.xls or .xlsx) using LibreOffice.
#

# Set useful shell options
set -Cueo pipefail

# Fix locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Script name and base
readonly FILENAME=$(basename "${0}")
readonly FILEBASE=$(dirname "${BASH_SOURCE[0]}")
readonly DIRPATH_ONEXE=$(pwd)

# Change current directory to a directory where script located
cd "${FILEBASE}"

if [[ -t 1 || -t 2 ]]; then
  # Colorize output escaping when to strout or strerr
  readonly TEXTRED="\e[31;1m"
  readonly TEXTYELLOW="\e[33;1m"
  readonly TEXTRESET="\e[m"
else
  # Un colorize output
  readonly TEXTRED=""
  readonly TEXTYELLOW=""
  readonly TEXTRESET=""
fi

# Warning helper
warning() {
  echo -e "${TEXTYELLOW}${FILENAME}: warning: ${*}${TEXTRESET}" >&2
}

# Error helper
error() {
  echo -e "${TEXTRED}${FILENAME}: error: ${*}${TEXTRESET}" >&2
  exit 1
}

usage() {
  cat <<EOF
Usage:
  ${FILENAME} SOURCE DEST
  ${FILENAME} -h

Generate a CSV file from Excel file (.xls or .xlsx) using LibreOffice.

Options:
  -h, --help                 Show this messages
  --version                  Show version
  -e, --encoding <encoding>  Specify destination csv file encoding (optional)
                             'utf8' or 'UTF-8' specify UTF-8 encoding (default).
                             'sjis' or 'Shift-JIS' specify Shift-JIS encoding.
EOF
}

usage_short() {
  cat <<EOF
Usage: ${FILENAME} SOURCE DEST
Try '${FILENAME} --help' for more information.
EOF
}

version() {
  echo "${FILENAME} version 1.0.0"
}

#######################################
# Generate a destination file path
# Global:
#   DIRPATH_ONEXE: a directory path when script executed
# Arguments:
#   SRC_FILENAME: a source file name
#   DST_PATH: a destination file or directory path
# Return:
#   a destination file path
#######################################
generate_dst_filepath() {
  local -r SRC_FILENAME="${1}"
  local -r DST_PATH="${2}"

  local -r DST_FULLPATH=$(cd "${DIRPATH_ONEXE}" && realpath "${DST_PATH}")

  if [[ -d ${DST_FULLPATH} ]]; then
    local -r DST_FILEPATH="${DST_FULLPATH}/${SRC_FILENAME}"
  else
    local -r DST_FILEPATH="${DST_FULLPATH}"
  fi

  echo "${DST_FILEPATH}"
}

declare -ri SJIS_CODE=64
declare -ri UTF8_CODE=76

readonly -A ENCODING_CODES=( \
  ["sjis"]=${SJIS_CODE} \
  ["Shift-JIS"]=${SJIS_CODE} \
  ["utf8"]=${UTF8_CODE} \
  ["UTF-8"]=${UTF8_CODE} \
)

declare -i ENCODING_CODE=${UTF8_CODE}
# declare DESTINATION_FILEPATH="."

# Argument array
declare -a ARGS=()

# Parse arguments
while [[ $# -gt 0 ]]; do
  case ${1} in
    --debug )
      set -x
      shift
      ;;
    -h | --help )
      usage
      exit 0
      ;;
    --version )
      version
      exit 0
      ;;
    --encoding | -e )
      ENCODING_CODE=${ENCODING_CODES["${2}"]}
      shift 2
      ;;
    -* )
      echo -e "${FILENAME}: Invalid option -- '${1}'\n" >&2
      usage_short
      exit 1
      ;;
    * )
      ARGS+=("${1}")
      shift
      ;;
  esac
done

declare -ri ARGS_NUM=${#ARGS[*]}

if [[ ${ARGS_NUM} -eq 0 ]]; then
  usage_short
  exit 1
elif ! [[ ${ARGS_NUM} -eq 1 || ${ARGS_NUM} -eq 2 ]]; then
  error "too many arguments"
fi

readonly SOURCE_FILEPATH=$(cd "${DIRPATH_ONEXE}" && realpath -e "${ARGS[0]}")
readonly SOURCE_FILENAME=$(basename "${SOURCE_FILEPATH}")
readonly SOURCE_FILENAME_NO_EXT="${SOURCE_FILENAME%.*}"
readonly SOURCE_FILENAME_CSV_EXT="${SOURCE_FILENAME_NO_EXT}.csv"

if [[ ${ARGS_NUM} -eq 1 ]]; then
  readonly DESTINATION_FILEPATH="${DIRPATH_ONEXE}/${SOURCE_FILENAME_CSV_EXT}"
else
  readonly DESTINATION_PATH="${ARGS[1]}"
  readonly DESTINATION_FILEPATH=$(generate_dst_filepath "${SOURCE_FILENAME_CSV_EXT}" "${DESTINATION_PATH}")
fi

readonly TMP_DIRPATH="$(mktemp -d "/tmp/${FILENAME}_XXXXXX")"
trap 'rm -rf "${TMP_DIRPATH}"' 0               # EXIT
trap 'rm -rf "${TMP_DIRPATH}"; exit 1' 2       # INT
trap 'rm -rf "${TMP_DIRPATH}"; exit 1' 1 15    # HUP TERM

readonly TMP_FILEPATH="${TMP_DIRPATH}/${SOURCE_FILENAME_CSV_EXT}"

libreoffice \
  --headless \
  --convert-to "csv:Text - txt - csv (StarCalc):44,34,${ENCODING_CODE},1" \
  --outdir "${TMP_DIRPATH}" \
  "${SOURCE_FILEPATH}" \
  > /dev/null

mv "${TMP_FILEPATH}" "${DESTINATION_FILEPATH}"
echo "Generated CSV -> ${DESTINATION_FILEPATH}"
